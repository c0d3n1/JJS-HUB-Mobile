local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "JJS Hub",
    Icon = 0,
    LoadingTitle = "JJS Hub",
    LoadingSubtitle = "by proguyisreal",
    Theme = "Default",
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "JJS Hub"
    },
    Discord = {
        Enabled = true,
        Invite = "fpXzgaxDQ5",
        RememberJoins = true
    },
    KeySystem = true,
    KeySettings = {
        Title = "JJS Hub",
        Subtitle = "Key System",
        Note = "Real sigmas",
        FileName = "JJS Key",
        SaveKey = true,
        GrabKeyFromSite = true,
        Key = {"eye of rah"}
    }
})

-- Animation IDs
local ANIMATIONS = {
    Fly = 616158929,       -- Replace with your fly animation ID
    Idle = 2510233257,     -- Replace with idle animation ID
    Run = 125750702        -- Replace with run animation ID
}

local IsOnMobile = game:GetService("UserInputService").TouchEnabled
local player = game:GetService("Players").LocalPlayer

-- Fly system variables
local mfly1, mfly2
local FLYING = false
local velocityHandlerName = "MobileVelocity"
local gyroHandlerName = "MobileGyro"
local iyflyspeed = 50
local vehicleflyspeed = 50
local currentAnim = nil
local animator = nil

-- Store toggle reference globally
local FlyToggle = nil

-- Helper functions
local function getRoot(char)
    return char and (char:FindFirstChild("HumanoidRootPart") or char:FindFirstChild("Torso") or char:FindFirstChild("UpperTorso"))
end

local function safeDisconnect(conn)
    if conn then
        pcall(function() conn:Disconnect() end)
        conn = nil
    end
    return conn
end

-- Animation control
local function playAnimation(animName)
    if not player.Character then return end
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end
    
    -- Stop current animation
    if currentAnim then
        currentAnim:Stop()
        currentAnim = nil
    end
    
    -- Load and play new animation
    if ANIMATIONS[animName] then
        local anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://"..ANIMATIONS[animName]
        currentAnim = humanoid:LoadAnimation(anim)
        currentAnim:Play()
        currentAnim.Looped = true
    end
end

-- Stop flying function
local function NOFLY()
    if not FLYING then return end
    
    FLYING = false
    local char = player.Character
    if char then
        local root = getRoot(char)
        if root then
            local bv = root:FindFirstChild(velocityHandlerName)
            local bg = root:FindFirstChild(gyroHandlerName)
            if bv then bv:Destroy() end
            if bg then bg:Destroy() end
        end

        local hum = char:FindFirstChildWhichIsA("Humanoid")
        if hum then 
            hum.PlatformStand = false
            playAnimation("Idle") -- Return to idle when not flying
        end
    end

    mfly1 = safeDisconnect(mfly1)
    mfly2 = safeDisconnect(mfly2)
end

-- Start flying function
local function sFLY()
    if FLYING then return end
    
    FLYING = true
    local char = player.Character
    if not char then return end
    
    local root = getRoot(char)
    if not root then return end
    
    local camera = workspace.CurrentCamera
    local v3inf = Vector3.new(9e9, 9e9, 9e9)
    
    -- Play fly animation
    playAnimation("Fly")
    
    -- Create velocity + gyro
    local bv = Instance.new("BodyVelocity")
    bv.Name = velocityHandlerName
    bv.MaxForce = v3inf
    bv.Velocity = Vector3.zero
    bv.Parent = root

    local bg = Instance.new("BodyGyro")
    bg.Name = gyroHandlerName
    bg.MaxTorque = v3inf
    bg.P = 1000
    bg.D = 50
    bg.Parent = root

    -- Reapply on respawn
    mfly1 = player.CharacterAdded:Connect(function(newChar)
        task.wait(1)
        if not FLYING then return end
        
        local newRoot = getRoot(newChar)
        if not newRoot then return end

        -- Recreate velocity and gyro
        local newBV = newRoot:FindFirstChild(velocityHandlerName) or Instance.new("BodyVelocity")
        newBV.Name = velocityHandlerName
        newBV.MaxForce = v3inf
        newBV.Velocity = Vector3.zero
        newBV.Parent = newRoot

        local newBG = newRoot:FindFirstChild(gyroHandlerName) or Instance.new("BodyGyro")
        newBG.Name = gyroHandlerName
        newBG.MaxTorque = v3inf
        newBG.P = 1000
        newBG.D = 50
        newBG.Parent = newRoot
        
        -- Replay animation
        playAnimation("Fly")
    end)

    -- Update each frame
    mfly2 = game:GetService("RunService").RenderStepped:Connect(function()
        if not FLYING then return end
        
        char = player.Character
        if not char then return end
        
        root = getRoot(char)
        if not root then return end

        local VelocityHandler = root:FindFirstChild(velocityHandlerName)
        local GyroHandler = root:FindFirstChild(gyroHandlerName)
        if not (VelocityHandler and GyroHandler) then return end

        GyroHandler.CFrame = camera.CFrame
        VelocityHandler.Velocity = (camera.CFrame.LookVector * iyflyspeed) + Vector3.new(0, 0.5, 0)
    end)
end

-- UI Setup
local Tab = Window:CreateTab("Blatant", 4483362458)
local TabMisc = Window:CreateTab("Miscellaneous", 4483362458)

Tab:CreateSection("Movement")
TabMisc:CreateSection("Scripts")

TabMisc:CreateButton({
    Name = "Load IY",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
    end
})

-- Teleport System
local teleportDistance = 10
local camera = workspace.CurrentCamera

Tab:CreateKeybind({
    Name = "Teleport Keybind",
    CurrentKeybind = "T",
    HoldToInteract = false,
    Callback = function()
        local character = player.Character or player.CharacterAdded:Wait()
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart and camera then
            local dir = camera.CFrame.LookVector
            local moveDir = (dir.Y > 0.1) and dir.Unit or Vector3.new(dir.X, 0, dir.Z).Unit
            rootPart.CFrame = CFrame.new(rootPart.Position + moveDir * teleportDistance, rootPart.Position + moveDir * 2)
        end
    end
})

Tab:CreateSlider({
    Name = "Teleport Distance",
    Range = {1, 100},
    Increment = 1,
    Suffix = "Studs",
    CurrentValue = teleportDistance or 10,
    Flag = "TeleportSlider",
    Callback = function(Value)
        teleportDistance = Value
    end
})

-- Fly System UI
FlyToggle = Tab:CreateToggle({
    Name = "Fly",
    CurrentValue = FLYING,
    Callback = function(state)
        local success, err = pcall(function()
            if state then
                sFLY()
            else
                NOFLY()
            end
        end)
        
        if not success then
            warn("Fly Toggle Error:", err)
            if FlyToggle then
                FlyToggle:Set(not state)
            end
        end
    end,
})

Tab:CreateSlider({
    Name = "Fly Speed",
    Range = {1, 200},
    Increment = 1,
    Suffix = "speed",
    CurrentValue = iyflyspeed,
    Callback = function(value)
        iyflyspeed = value
    end,
})

Tab:CreateKeybind({
    Name = "Toggle Fly",
    CurrentKeybind = "F",
    HoldToInteract = false,
    Callback = function()
        FLYING = not FLYING
        if FlyToggle then
            FlyToggle:Set(FLYING)
        end
        if FLYING then
            sFLY()
        else
            NOFLY()
        end
    end,
})

-- Load configuration
Rayfield:LoadConfiguration()
