local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Define missing variables/functions at the top
local IsOnMobile = game:GetService("UserInputService").TouchEnabled

local function NOFLY()
    if FLYING then
        unmobilefly(game:GetService("Players").LocalPlayer)
    end
end

local function sFLY()
    if not FLYING then
        mobilefly(game:GetService("Players").LocalPlayer)
    end
end

local Window = Rayfield:CreateWindow({
    Name = "JJS Hub",
    Icon = 0,
    LoadingTitle = "JJS Hub",
    LoadingSubtitle = "by proguyisreal",
    Theme = "Default",
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "JJS Hub"
    },
    Discord = {
        Enabled = true,
        Invite = "fpXzgaxDQ5",
        RememberJoins = true
    },
    KeySystem = true,
    KeySettings = {
        Title = "JJS Hub",
        Subtitle = "Key System",
        Note = "Real sigmas",
        FileName = "JJS Key",
        SaveKey = true,
        GrabKeyFromSite = true,
        Key = {"eye of rah"}
    }
})

-- Animation IDs
local ANIMATIONS = {
    Forward = 282574440,
    Backward = 9443517965,
    Left = 9443520855,
    Right = 9443521999,
    Idle = 616158929
}

-- Globals
local mfly1, mfly2
local FLYING = false
local velocityHandlerName = "MobileVelocity"
local gyroHandlerName = "MobileGyro"
local iyflyspeed = 1
local vehicleflyspeed = 1

-- Helpers
local function getRoot(char)
    return char and (char:FindFirstChild("HumanoidRootPart") or char:FindFirstChild("Torso") or char:FindFirstChild("UpperTorso"))
end

local function loadAnimation(char, id)
    local humanoid = char and char:FindFirstChildOfClass("Humanoid")
    if not humanoid then return nil end
    local anim = Instance.new("Animation")
    anim.AnimationId = "rbxassetid://"..id
    return humanoid:LoadAnimation(anim)
end

-- Disconnect with nil check
local function safeDisconnect(conn)
    if conn then
        pcall(function() conn:Disconnect() end)
        conn = nil
    end
    return conn
end

-- Stop all anims
local animTracks = {}
local function stopAllAnims()
    for k, v in pairs(animTracks) do
        if v then
            v:Stop()
        end
    end
    animTracks = {}
end

-- Update animation based on move vector
local function updateMobileAnimation(char, dir)
    stopAllAnims()

    local animName = "Idle"
    if math.abs(dir.X) > math.abs(dir.Z) then
        animName = dir.X > 0 and "Right" or "Left"
    elseif math.abs(dir.Z) > 0 then
        animName = dir.Z < 0 and "Forward" or "Backward"
    end

    local track = loadAnimation(char, ANIMATIONS[animName])
    if track then
        track:Play()
        track.Looped = true
        animTracks[animName] = track
    end
end

-- Stop flying
local function unmobilefly(speaker)
    FLYING = false
    local char = speaker.Character
    if char then
        local root = getRoot(char)
        if root then
            local bv = root:FindFirstChild(velocityHandlerName)
            local bg = root:FindFirstChild(gyroHandlerName)
            if bv then bv:Destroy() end
            if bg then bg:Destroy() end
        end

        local hum = char:FindFirstChildWhichIsA("Humanoid")
        if hum then hum.PlatformStand = false end
    end

    mfly1 = safeDisconnect(mfly1)
    mfly2 = safeDisconnect(mfly2)
    stopAllAnims()
end

-- Start flying
local function mobilefly(speaker, vfly)
    unmobilefly(speaker)
    FLYING = true

    local char = speaker.Character
    local root = getRoot(char)
    local camera = workspace.CurrentCamera
    local v3inf = Vector3.new(9e9, 9e9, 9e9)
    local v3none = Vector3.zero

    local controlModule = require(speaker.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule"))

    -- Create velocity + gyro
    local bv = Instance.new("BodyVelocity")
    bv.Name = velocityHandlerName
    bv.MaxForce = Vector3.zero
    bv.Velocity = Vector3.zero
    bv.Parent = root

    local bg = Instance.new("BodyGyro")
    bg.Name = gyroHandlerName
    bg.MaxTorque = v3inf
    bg.P = 1000
    bg.D = 50
    bg.Parent = root

    -- Reapply on respawn
    mfly1 = speaker.CharacterAdded:Connect(function(newChar)
        task.wait(1)
        local newRoot = getRoot(newChar)
        if not newRoot then return end

        local newBV = Instance.new("BodyVelocity")
        newBV.Name = velocityHandlerName
        newBV.MaxForce = Vector3.zero
        newBV.Velocity = Vector3.zero
        newBV.Parent = newRoot

        local newBG = Instance.new("BodyGyro")
        newBG.Name = gyroHandlerName
        newBG.MaxTorque = v3inf
        newBG.P = 1000
        newBG.D = 50
        newBG.Parent = newRoot
    end)

    -- Update each frame
    mfly2 = game:GetService("RunService").RenderStepped:Connect(function()
        char = speaker.Character
        root = getRoot(char)
        if not (char and root) then return end

        local humanoid = char:FindFirstChildWhichIsA("Humanoid")
        local VelocityHandler = root:FindFirstChild(velocityHandlerName)
        local GyroHandler = root:FindFirstChild(gyroHandlerName)

        if not (humanoid and VelocityHandler and GyroHandler) then return end

        local speed = (vfly and vehicleflyspeed or iyflyspeed) * 50
        local direction = controlModule:GetMoveVector()

        VelocityHandler.MaxForce = v3inf
        GyroHandler.MaxTorque = v3inf
        GyroHandler.CFrame = camera.CFrame

        if not vfly then humanoid.PlatformStand = true end

        -- Reset and apply directional velocity
        VelocityHandler.Velocity = camera.CFrame:VectorToWorldSpace(Vector3.new(direction.X, 0, -direction.Z)) * speed

        -- Animation update
        updateMobileAnimation(char, direction)
    end)
end

-- // UI Tabs and Buttons
local Tab = Window:CreateTab("Blatant", 4483362458)
local TabMisc = Window:CreateTab("Miscellaneous", 4483362458)

Tab:CreateSection("Movement")
TabMisc:CreateSection("Scripts")

TabMisc:CreateButton({
    Name = "Load IY",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
    end
})

-- // Teleport
local teleportDistance = 10
local player = game:GetService("Players").LocalPlayer
local camera = workspace.CurrentCamera

Tab:CreateKeybind({
    Name = "Teleport Keybind",
    CurrentKeybind = "T",
    HoldToInteract = false,
    Callback = function()
        local character = player.Character or player.CharacterAdded:Wait()
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart and camera then
            local dir = camera.CFrame.LookVector
            local moveDir = (dir.Y > 0.1) and dir.Unit or Vector3.new(dir.X, 0, dir.Z).Unit
            rootPart.CFrame = CFrame.new(rootPart.Position + moveDir * teleportDistance, rootPart.Position + moveDir * 2)
        end
    end
})

Tab:CreateSlider({
    Name = "Teleport Distance",
    Range = {1, 100},
    Increment = 1,
    Suffix = "Studs",
    CurrentValue = teleportDistance or 10,
    Flag = "TeleportSlider",
    Callback = function(Value)
        teleportDistance = Value
    end
})

local FlyToggle = Tab:CreateToggle({
    Name = "Fly",
    CurrentValue = FLYING,
    Callback = function(state)
        if state then
            sFLY()
        else
            NOFLY()
        end
    end,
})

local FlySpeedSlider = Tab:CreateSlider({
    Name = "Fly Speed",
    Range = {1, 200},
    Increment = 1,
    Suffix = "speed",
    CurrentValue = iyflyspeed,
    Callback = function(value)
        iyflyspeed = value
    end,
})

local FlyKeybind = Tab:CreateKeybind({
    Name = "Toggle Fly",
    CurrentKeybind = "F",
    HoldToInteract = false,
    Callback = function()
        FLYING = not FLYING
        if FLYING then
            sFLY()
        else
            NOFLY()
        end
        FlyToggle:Set(FLYING)
    end,
})

-- // Load Saved Rayfield Config AFTER setup
Rayfield:LoadConfiguration()
